#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import BMIService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void initialize(string file)'
  print '  void update()'
  print '  void update_until(double time)'
  print '  void finalize_model()'
  print '  void run_model()'
  print '  string get_component_name()'
  print '   get_input_var_names()'
  print '   get_output_var_names()'
  print '  string get_var_type(string long_var_name)'
  print '  string get_var_units(string long_var_name)'
  print '  i32 get_var_rank(string long_var_name)'
  print '  double get_start_time()'
  print '  double get_end_time()'
  print '  double get_current_time()'
  print '  string get_value(string long_var_name)'
  print '  string get_value_at_indices(string long_var_name,  inds)'
  print '  void set_value(string long_var_name, string src)'
  print '  void set_value_at_indices(string long_var_name,  inds, string src)'
  print '  BmiGridType get_grid_type(string long_var_name)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BMIService.Client(protocol)
transport.open()

if cmd == 'initialize':
  if len(args) != 1:
    print 'initialize requires 1 args'
    sys.exit(1)
  pp.pprint(client.initialize(args[0],))

elif cmd == 'update':
  if len(args) != 0:
    print 'update requires 0 args'
    sys.exit(1)
  pp.pprint(client.update())

elif cmd == 'update_until':
  if len(args) != 1:
    print 'update_until requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_until(eval(args[0]),))

elif cmd == 'finalize_model':
  if len(args) != 0:
    print 'finalize_model requires 0 args'
    sys.exit(1)
  pp.pprint(client.finalize_model())

elif cmd == 'run_model':
  if len(args) != 0:
    print 'run_model requires 0 args'
    sys.exit(1)
  pp.pprint(client.run_model())

elif cmd == 'get_component_name':
  if len(args) != 0:
    print 'get_component_name requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_component_name())

elif cmd == 'get_input_var_names':
  if len(args) != 0:
    print 'get_input_var_names requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_input_var_names())

elif cmd == 'get_output_var_names':
  if len(args) != 0:
    print 'get_output_var_names requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_output_var_names())

elif cmd == 'get_var_type':
  if len(args) != 1:
    print 'get_var_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_var_type(args[0],))

elif cmd == 'get_var_units':
  if len(args) != 1:
    print 'get_var_units requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_var_units(args[0],))

elif cmd == 'get_var_rank':
  if len(args) != 1:
    print 'get_var_rank requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_var_rank(args[0],))

elif cmd == 'get_start_time':
  if len(args) != 0:
    print 'get_start_time requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_start_time())

elif cmd == 'get_end_time':
  if len(args) != 0:
    print 'get_end_time requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_end_time())

elif cmd == 'get_current_time':
  if len(args) != 0:
    print 'get_current_time requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_current_time())

elif cmd == 'get_value':
  if len(args) != 1:
    print 'get_value requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_value(args[0],))

elif cmd == 'get_value_at_indices':
  if len(args) != 2:
    print 'get_value_at_indices requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_value_at_indices(args[0],eval(args[1]),))

elif cmd == 'set_value':
  if len(args) != 2:
    print 'set_value requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_value(args[0],args[1],))

elif cmd == 'set_value_at_indices':
  if len(args) != 3:
    print 'set_value_at_indices requires 3 args'
    sys.exit(1)
  pp.pprint(client.set_value_at_indices(args[0],eval(args[1]),args[2],))

elif cmd == 'get_grid_type':
  if len(args) != 1:
    print 'get_grid_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_grid_type(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
